The response will be a JSON object with a key of garbage_collections. This will be set to an array containing objects representing each past garbage collection. Each will contain the standard Garbage Collection attributes.

Unauthorized

The resource was not found.

API Rate limit exceeded

Server error.

Unexpected error



To cancel the currently-active garbage collection for a registry, send a PUT request to /v2/registry/$REGISTRY_NAME/garbage-collection/$GC_UUID and specify one or more of the attributes below.

The name of a container registry.

The UUID of a garbage collection run.

A boolean value indicating that the garbage collection should be cancelled.

The response will be a JSON object with a key of garbage_collection. This will be a json object with attributes representing the currently-active garbage collection.

Unauthorized

The resource was not found.

API Rate limit exceeded

Server error.

Unexpected error



This endpoint serves to provide additional information as to which option values are available when creating a container registry. There are multiple subscription tiers available for container registry. Each tier allows a different number of image repositories to be created in your registry, and has a different amount of storage and transfer included. There are multiple regions available for container registry and controls where your data is stored. To list the available options, send a GET request to /v2/registry/options.

The response will be a JSON object with a key called options which contains a key called subscription_tiers listing the available tiers.

Unauthorized

API Rate limit exceeded

Server error.

Unexpected error



DigitalOcean's managed database service simplifies the creation and management of highly available database clusters. Currently, it offers support for PostgreSQL, Redis, MySQL, and MongoDB.

By sending requests to the /v2/databases endpoint, you can list, create, or delete database clusters as well as scale the size of a cluster, add or remove read-only replicas, and manage other configuration details.

Database clusters may be deployed in a multi-node, high-availability configuration. If your machine type is above the basic nodes, your node plan is above the smallest option, or you are running MongoDB, you may additionally include up to two standby nodes in your cluster.

The size of individual nodes in a database cluster is represented by a human-readable slug, which is used in some of the following requests. Each slug denotes the node's identifier, CPU count, and amount of RAM, in that order.

For a list of currently available database slugs and options, use the /v2/databases/options endpoint or use the doctl databases options command.

To list all of the options available for the offered database engines, send a GET request to /v2/databases/options. The result will be a JSON object with an options key.

A JSON string with a key of options.

Unauthorized

The resource was not found.

API Rate limit exceeded

Server error.

Unexpected error



To list all of the database clusters available on your account, send a GET request to /v2/databases. To limit the results to database clusters with a specific tag, include the tag_name query parameter set to the name of the tag. For example, /v2/databases?tag_name=$TAG_NAME. The result will be a JSON object with a databases key. This will be set to an array of database objects, each of which will contain the standard database attributes. The embedded connection and private_connection objects will contain the information needed to access the database cluster: The embedded maintenance_window object will contain information about any scheduled maintenance for the database cluster.

Limits the results to database clusters with a specific tag.

A JSON object with a key of databases.

Unauthorized

The resource was not found.

API Rate limit exceeded

Server error.

Unexpected error